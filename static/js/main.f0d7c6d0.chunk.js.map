{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","useState","newTweets","setNewTweets","textAreaRef","React","createRef","className","onSubmit","event","preventDefault","newT","current","value","tempNewTweets","unshift","content","likes","id","console","log","ref","name","required","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhttp","XMLHttpRequest","onload","response","status","onerror","e","open","responseType","send","loadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","display","setLikes","userLike","setUserLike","actionDisplay","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","StrictMode","tweetsEl"],"mappings":"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","file":"static/js/main.f0d7c6d0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from 'react';\nimport { loadTweets } from '../lookup'\n\n\nexport function TweetsComponent(props) {\n    //set state variables\n    const [newTweets, setNewTweets] = useState([])\n    const textAreaRef = React.createRef()\n\n    //new tweet handler\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newT = textAreaRef.current.value\n        let tempNewTweets = [...newTweets]\n        tempNewTweets.unshift({\n            content: newT,\n            likes: 0,\n            id: 15\n        })\n        setNewTweets(tempNewTweets)\n        console.log(newT)\n        textAreaRef.current.value = ''\n    }\n\n    return <div className={props.className}>\n        <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>\n                <textarea ref={textAreaRef} className='form-control' name='tweet' required={true}>\n                </textarea>\n                <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n            </form>\n        </div>\n        <TweetsList newTweets={newTweets}/>\n    </div>\n\n}\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([]) \n    const [tweets, setTweets] = useState([])\n    // const performLookup = () => {\n    // }\n    \n    //combine new and inital tweets\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if(final.length !== tweets.length){\n            setTweets(final)\n        }\n    }, [props.newTweets, tweetsInit, tweets]) \n\n    //pull inital tweets\n    useEffect(() => {\n        const myCallback = (response, status) => {\n            console.log(response, status)\n            if (status === 200) {\n                setTweetsInit(response)\n            }\n            else {\n                alert(\"There was an error\")\n            }\n        }\n        loadTweets(myCallback)\n    }, [])\n\n    return <div>\n        {tweets.map((item, index) => {\n            return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\n        })}\n    </div>\n}\n\nexport function Tweet(props) {\n    const { tweet } = props\n    const className = props.className ? props.className : 'col-12 col-md-9 mb-4 py-3 border rounded mx-auto'\n    return <div className={className}>\n        <p>{tweet.id} - {tweet.content}</p>\n        <div className='btn btn-group'>\n            <ActionBtn tweet={tweet} action={{ type: 'like', display: \"Likes\" }} />\n            <ActionBtn tweet={tweet} action={{ type: 'unlike', display: \"Unlike\" }} />\n            <ActionBtn tweet={tweet} action={{ type: 'retweet', display: \"Retweet\" }} />\n        </div>\n    </div>\n}\n\nexport function ActionBtn(props) {\n    const { tweet, action } = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    const display = action.type === 'like' ?\n        `${tweet.likes} ${actionDisplay}` : actionDisplay\n\n    //handle like button\n    const handleClick = (event) => {\n        event.preventDefault()\n        if (action.type === 'like') {\n            if (userLike === true) {\n                //unlike if already liked \n                setLikes(likes - 1)\n                setUserLike(false)\n            }\n            else {\n                setLikes(likes + 1)\n                setUserLike(true)\n            }\n        }\n    }\n    return <button className={className} onClick={handleClick}>\n        {display}\n    </button>\n}","//import React from 'react';\n\nexport function loadTweets(callback) {\n  var xhttp = new XMLHttpRequest();\n  const method = 'GET';\n  const url = 'http://localhost:8000/api/tweets/';\n  const responseType = 'json';\n\n  xhttp.onload = function() {\n      callback(xhttp.response, xhttp.status)\n  }\n  xhttp.onerror = function(e) {\n    console.log(e)\n    callback({'message': \"The request was and error\"}, 400)\n  }\n  xhttp.open(method, url);\n  xhttp.responseType = responseType;\n  xhttp.send()\n}","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport {TweetsComponent} from './tweets'\n\n//pulls tweets from backend api endpoint and display on page \n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <TweetsComponent />\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets'\nimport reportWebVitals from './reportWebVitals';\n\nconst appEl = document.getElementById('root')\nif(appEl){\n  ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  appEl\n  );\n}\n\nconst tweetsEl = document.getElementById('tweetme-2')\nif(tweetsEl){\n  ReactDOM.render(\n  <React.StrictMode>\n    <TweetsComponent />\n  </React.StrictMode>,\n  tweetsEl\n  );\n}\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}